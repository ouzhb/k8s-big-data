#!/bin/bash
# Copyright (c) 2018 by Cisco System, Inc.

# Check stored zookeeper quorum for liveness. If any are no longer available, we must restart because kafka only
# resolves a zk address when it first connects and it will no re-try to resolve it. There is no way to find out
# which zookeeper a kafka broker is currently connected to, so we have to restart in the event of any zookeeper failure.

# Read zookeeper quorum IPs generated by run.sh
# Check zk health of each IP

zk_ip=""
failure_count=0
ip_count=0

zk_servers_config=`cat /opt/kafka/config/server.properties |grep zookeeper.connect=` 
zk_servers=${zk_servers_config#*=}
for ipport in `echo "$zk_servers" | sed 's/,/\n/g'`
do  
  ip=${ipport%:*}
  echo $ip 
  failure=0
  if [ -n "$ip" ]; then
    echo stat | nc $ip 2181 || failure=1
    echo ruok | nc $ip 2181 | grep imok || failure=1
    if [ $failure -eq 0 ]
    then
        zk_ip=$ip
    fi

    failure_count=`expr $failure_count + $failure`
    ip_count=`expr $ip_count + 1`
  fi	
done

echo $failure_count

if [ $ip_count -lt `expr $failure_count \* 2` ]; then
    echo "failure"
	exit 1
else
    echo "success"
fi

# If zookeeper is available, it then checks the contents of the zookeeper broker meta data to ensure that
# the broker id of this kafka broker is present

this_broker_id=$(grep broker.id /opt/kafka/config/server.properties | cut -d= -f 2)

broker_list=$(echo dump | nc $zk_ip 2181 | grep brokers)
for broker in $broker_list
do
    zk_broker_id=$(echo $broker |cut -d/ -f 4)
    if [ $zk_broker_id -eq $this_broker_id ]
    then
        echo "broker and zk are healthy"
        exit 0
    fi
done

echo "broker id not found in zookeeper, broker is probably not healthy so restart"
exit 1
